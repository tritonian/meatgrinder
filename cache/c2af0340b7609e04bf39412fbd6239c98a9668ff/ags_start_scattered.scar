---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
-- jackelpobelope (inspiration for current scattered villagers)
-- Rasselbock
-- Description:
-- Spawns villagers randomly on the map.
---------------------------------------------------------------------------------------------------

AGS_SCATTERED_MODULE = "AGS_Scattered"
AGS_SCATTERED_RADIUS = 1
AGS_SCATTERED_TUNING = 1.9
AGS_SCATTERED_WOOD = 0
AGS_SCATTERED_STONE = 0
VILLAGER_COUNT = 5

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_SCATTERED_MODULE)	

function AGS_Scattered_PreInit()
	print("AGS scattered preinit")
	_mod.nomadStart = options_selected.other_options.nomad
	print("nomad setting in scattered module: ", _mod.nomadStart)
	if not _mod.nomadStart then
		print("Unregistering nomad start")
		Core_UnregisterModule(AGS_SCATTERED_MODULE)
		return
	end
end

function AGS_Scattered_OnInit()
	--print("AGS Scattered oninit")
	
	AGS_Scattered_DestroySpawn() -- not sure exactly what this does
	
	-- Tune villager spawn out from the middle of the map.
	AGS_SCATTERED_RADIUS = math.max(World_GetWidth(), World_GetLength())/AGS_SCATTERED_TUNING 
	Camera_MoveTo(World_Pos(0,World_GetHeightAt(0,0),0))
	
	FOW_UnExploreAll()
	FOW_UnRevealAll( ) 
	
	AGS_Scattered_CreateSpawn()
end

function AGS_Scattered_Start()
	--print("AGS Scattered start")
	for _, player in pairs(PLAYERS) do	
		-- Insist that player do not have capital.
		Player_SetStateModelFloat(player.id, "has_capital", 0)	
		-- Player should be able to build structures.
		Player_SetStateModelBool(player.id, "player_can_construct_structures", true)	
	end
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Removing prefab start.
function AGS_Scattered_DestroySpawn()
	--print("AGS_Scattered_DestroySpawn")
	for _, player in pairs(PLAYERS) do	
		EGroup_DestroyAllEntities(Player_GetEntities(player.id))
		SGroup_DestroyAllSquads(Player_GetSquads(player.id))
	end
end

-- Get spawn dimensions and initial squad location.
function AGS_Scattered_GetScatterPosition()
	--print("get scatter position")
	local x = World_GetRand(0 - AGS_SCATTERED_RADIUS, AGS_SCATTERED_RADIUS)
	local z = World_GetRand(0 - AGS_SCATTERED_RADIUS, AGS_SCATTERED_RADIUS)
	local y = World_GetHeightAt(x, z)
	return World_Pos(x, y, z)
end

-- Distributes all players all units randomly around the map.
function AGS_Scattered_CreateSpawn()	
	--print("AGS Scattered createspawn")
	for _, player in pairs(PLAYERS) do		
		-- Get Villager BP and spawn them at random location, then ask to create artificial home for AI.
		local sbp_vil = BP_GetSquadBlueprint(AGS_ENTITY_TABLE[player.raceName]["villager"])
		local snameVIL = AGS_SGroupName(player.id, "villager")
		local squad_group = SGroup_CreateIfNotFound(snameVIL)
		
		-- adjust villager count
		local thisPlayersVilCount = VILLAGER_COUNT
		
		-- check if double starting vils is on
		_mod.double_starting_vils = options_selected.other_options.double_vils
		if _mod.double_starting_vils then
			thisPlayersVilCount = VILLAGER_COUNT * 2
		end
		
		-- race specific changes
		if player.raceName == "hre_ha_01" then
			if thisPlayersVilCount >= 10 then
				thisPlayersVilCount = thisPlayersVilCount - 2
			elseif thisPlayersVilCount >= 5 then
				thisPlayersVilCount = thisPlayersVilCount - 1
			end
		elseif player.raceName == "french_ha_01" then
			-- spawn a joan
			local spawn_pos = AGS_Scattered_GetScatterPosition()
			local sbp_joan =  BP_GetSquadBlueprint(AGS_ENTITY_TABLE[player.raceName]["jeanne"])
			local snameJoan = AGS_SGroupName(player.id, AGS_ENTITY_TABLE[player.raceName]["jeanne"])
			local squad_group_joan = SGroup_CreateIfNotFound(snameJoan)
			UnitEntry_DeploySquads(player.id, squad_group_joan, {{sbp = sbp_joan, numSquads = 1 }}, spawn_pos)
			-- reduce following count by 1
			thisPlayersVilCount = thisPlayersVilCount - 1
		end
		
		-- spawn vils
		for i=1,thisPlayersVilCount do
			local spawn_pos = AGS_Scattered_GetScatterPosition()
			UnitEntry_DeploySquads(player.id, squad_group, {{sbp = sbp_vil, numSquads = 1 }}, spawn_pos)
		end		
		
		--Core_CallDelegateFunctions("UnitsSpawned", player.id, nil, squad_group)	-- probably don't need this		
	end
end	

function AGS_SGroupName(player_id, unit_category)
	return "sg_player_" .. unit_category .. "_" .. tostring(player_id)
end